import { __decorate, __metadata, __read, __spread } from "tslib";
import { Directive, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { ExportType } from './export-type';
import { DataExtractorService } from './services/data-extractor.service';
import { ServiceLocatorService } from './services/service-locator.service';
/**
 * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.
 */
import * as ɵngcc0 from '@angular/core';
var CdkTableExporter = /** @class */ (function () {
    function CdkTableExporter(renderer, serviceLocator, dataExtractor, _cdkTable) {
        this.renderer = renderer;
        this.serviceLocator = serviceLocator;
        this.dataExtractor = dataExtractor;
        this._cdkTable = _cdkTable;
        this.exportCompleted = new EventEmitter();
        this.exportStarted = new EventEmitter();
    }
    /**
     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages
     */
    CdkTableExporter.prototype.exportTable = function (exportType, options) {
        this.loadExporter(exportType);
        this._options = options;
        this.exportStarted.emit();
        this._isIterating = true;
        this._isExporting = true;
        this._data = new Array();
        this.extractTableHeader();
        try {
            this.exportWithPagination();
        }
        catch (notPaginated) {
            this.exportSinglePage();
        }
    };
    CdkTableExporter.prototype.toggleRow = function (index) {
        var paginatedRowIndex = this.getPaginatedRowIndex(index);
        if (this.isToggleOn(paginatedRowIndex)) {
            this.toggleOff(paginatedRowIndex);
        }
        else {
            this.toggleOn(paginatedRowIndex);
        }
    };
    /**
     * This event will clear rows selection done using toggleRow functionality
     *
     */
    CdkTableExporter.prototype.resetToggleRows = function () {
        this._selectedRows = [];
    };
    CdkTableExporter.prototype.toggleOn = function (index) {
        this._selectedRows = __spread((this._selectedRows || []), [index]);
    };
    CdkTableExporter.prototype.toggleOff = function (index) {
        this._selectedRows = this._selectedRows.filter(function (x) { return x !== index; });
    };
    CdkTableExporter.prototype.isToggleOn = function (index) {
        var _a;
        return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);
    };
    CdkTableExporter.prototype.loadExporter = function (exportType) {
        if (exportType === ExportType.OTHER.valueOf()) {
            this._exporterService = this.exporter;
        }
        else {
            this._exporterService = this.serviceLocator.getService(exportType);
        }
    };
    CdkTableExporter.prototype.exportWithPagination = function () {
        this._initialPageIndex = this.getCurrentPageIndex();
        this.initPageHandler();
        this.goToPage(0);
    };
    CdkTableExporter.prototype.exportSinglePage = function () {
        this.extractDataOnCurrentPage();
        this.extractTableFooter();
        this.exportExtractedData();
    };
    CdkTableExporter.prototype.extractDataOnCurrentPage = function () {
        var rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);
        this._data = this._data.concat(this.getSelectedRows(rows));
    };
    CdkTableExporter.prototype.getSelectedRows = function (rows) {
        var _this = this;
        if (this.isSelectiveExport()) {
            return rows.filter(function (_, i) { return _this._selectedRows.includes(_this.getPaginatedRowIndex(i)); });
        }
        else {
            return rows;
        }
    };
    CdkTableExporter.prototype.isSelectiveExport = function () {
        return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();
    };
    CdkTableExporter.prototype.isMasterToggleOn = function () {
        return this.compareSelectedRowCount(this.getTotalItemsCount());
    };
    CdkTableExporter.prototype.isMasterToggleOff = function () {
        return this.compareSelectedRowCount(0);
    };
    CdkTableExporter.prototype.compareSelectedRowCount = function (rowCount) {
        var _a;
        return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);
    };
    CdkTableExporter.prototype.initPageHandler = function () {
        var _this = this;
        if (!this._subscription) {
            this._subscription = this.getPageChangeObservable().subscribe(function () {
                setTimeout(function () {
                    if (_this._isIterating) {
                        _this.extractDataOnCurrentPage();
                        if (_this.hasNextPage()) {
                            _this.nextPage();
                        }
                        else {
                            _this._isIterating = false;
                            _this.goToPage(_this._initialPageIndex);
                        }
                    }
                    else if (_this._isExporting) {
                        _this._isExporting = false;
                        _this.extractTableFooter();
                        _this.exportExtractedData();
                    }
                });
            });
        }
    };
    CdkTableExporter.prototype.exportExtractedData = function () {
        this._exporterService.export(this._data, this._options);
        this._data = new Array();
        this.exportCompleted.emit();
    };
    CdkTableExporter.prototype.extractSpecialRows = function (outlet) {
        var _a;
        (_a = this._data).push.apply(_a, __spread(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet)));
    };
    CdkTableExporter.prototype.extractTableHeader = function () {
        this.extractSpecialRows(this._cdkTable._headerRowOutlet);
    };
    CdkTableExporter.prototype.extractTableFooter = function () {
        this.extractSpecialRows(this._cdkTable._footerRowOutlet);
    };
    CdkTableExporter.prototype.hasNextPage = function () {
        if (this.getCurrentPageIndex() < this.getPageCount() - 1) {
            return true;
        }
        else {
            return false;
        }
    };
    CdkTableExporter.prototype.nextPage = function () {
        this.goToPage(this.getCurrentPageIndex() + 1);
    };
    CdkTableExporter.prototype.getPaginatedRowIndex = function (index) {
        return index + (this.getPageSize() * this.getCurrentPageIndex());
    };
    CdkTableExporter.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ServiceLocatorService },
        { type: DataExtractorService },
        { type: undefined }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Array)
    ], CdkTableExporter.prototype, "hiddenColumns", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], CdkTableExporter.prototype, "exporter", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CdkTableExporter.prototype, "exportCompleted", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], CdkTableExporter.prototype, "exportStarted", void 0);
    CdkTableExporter = __decorate([ __metadata("design:paramtypes", [Renderer2,
            ServiceLocatorService,
            DataExtractorService, Object])
    ], CdkTableExporter);
CdkTableExporter.ɵfac = function CdkTableExporter_Factory(t) { return new (t || CdkTableExporter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ServiceLocatorService), ɵngcc0.ɵɵdirectiveInject(DataExtractorService), ɵngcc0.ɵɵdirectiveInject(undefined)); };
CdkTableExporter.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTableExporter, inputs: { hiddenColumns: "hiddenColumns", exporter: "exporter" }, outputs: { exportCompleted: "exportCompleted", exportStarted: "exportStarted" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTableExporter, [{
        type: Directive
    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ServiceLocatorService }, { type: DataExtractorService }, { type: undefined }]; }, { exportCompleted: [{
            type: Output
        }], exportStarted: [{
            type: Output
        }], hiddenColumns: [{
            type: Input
        }], exporter: [{
            type: Input
        }] }); })();
    return CdkTableExporter;
}());
export { CdkTableExporter };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,