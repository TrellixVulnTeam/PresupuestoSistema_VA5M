import { __decorate, __extends, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { MIME_TXT, RETURN, TAB } from './../../constants';
import { FileExporter } from './file-exporter';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var TxtExporterService = /** @class */ (function (_super) {
    __extends(TxtExporterService, _super);
    function TxtExporterService() {
        return _super.call(this) || this;
    }
    TxtExporterService.prototype.createContent = function (rows, options) {
        var _this = this;
        var content = '';
        rows.forEach(function (element) {
            content += Object.values(element).join(_this.getDelimiter(options)) + RETURN;
        });
        return content;
    };
    TxtExporterService.prototype.getMimeType = function () {
        return MIME_TXT;
    };
    TxtExporterService.prototype.getDelimiter = function (options) {
        if (options && options.delimiter) {
            return options.delimiter;
        }
        else {
            return TAB;
        }
    };
    TxtExporterService.ɵprov = i0.ɵɵdefineInjectable({ factory: function TxtExporterService_Factory() { return new TxtExporterService(); }, token: TxtExporterService, providedIn: "root" });
    TxtExporterService = __decorate([ __metadata("design:paramtypes", [])
    ], TxtExporterService);
TxtExporterService.ɵfac = function TxtExporterService_Factory(t) { return new (t || TxtExporterService)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TxtExporterService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return TxtExporterService;
}(FileExporter));
export { TxtExporterService };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHh0LWV4cG9ydGVyLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIm5nOi9jZGstdGFibGUtZXhwb3J0ZXIvbGliL3NlcnZpY2VzL2V4cG9ydGVycy90eHQtZXhwb3J0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0M7O0FBSUE7QUFBNEQsSUFBcEIsc0NBQXdCO0FBQUMsSUFFL0Q7QUFFQyxlQURDLGlCQUFPO0FBR1IsSUFGRCxDQUFDO0FBQ0gsSUFDUywwQ0FBYSxHQUFwQixVQUFxQixJQUFXLEVBQUUsT0FBb0I7QUFDeEQsUUFERSxpQkFNQztBQUNILFFBTkksSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO0FBQ3JCLFFBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLE9BQU87QUFBSSxZQUN0QixPQUFPLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQztBQUNsRixRQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ1AsUUFBSSxPQUFPLE9BQU8sQ0FBQztBQUNuQixJQUFFLENBQUM7QUFFSCxJQUFTLHdDQUFXLEdBQWxCO0FBQWMsUUFDWixPQUFPLFFBQVEsQ0FBQztBQUNwQixJQUFFLENBQUM7QUFFSCxJQUFVLHlDQUFZLEdBQXBCLFVBQXFCLE9BQW9CO0FBQzNDLFFBQUksSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUN0QyxZQUFNLE9BQU8sT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMvQixTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sT0FBTyxHQUFHLENBQUM7QUFDakIsU0FBSztBQUNMLElBQUUsQ0FBQztBQUVIO0FBQzRMLElBM0IvSyxrQkFBa0Isd0JBSDlCLFVBQVUsQ0FBQyxjQUNWLGxDQUVNO09BRkksRUFBRSxNQUFNLFVBQ25CLENBQUMsMUJBQzJDLE9BQWhDLGtCQUFrQixDQTBCOUI7Ozs7Ozs7Z0RBQ0Q7QUFBQyw2QkFwQ0Q7QUFBRSxDQW1DRCxBQTFCRCxDQUF3QyxZQUFZLEdBMEJuRDs7QUFuQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUdBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUFBLEFBQUEsQUFFQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBTEEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUF4QkEsQUFBQSxBQUhBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUEwQkEsQUFuQ0EsQUFtQ0EsQUExQkEsQUFBQSxBQUFBLEFBMEJBLEFBMUJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE1pbWUgfSBmcm9tICcuLi8uLi9taW1lJztcclxuaW1wb3J0IHsgVHh0T3B0aW9ucyB9IGZyb20gJy4uLy4uL29wdGlvbnMnO1xyXG5pbXBvcnQgeyBNSU1FX1RYVCwgUkVUVVJOLCBUQUIgfSBmcm9tICcuLy4uLy4uL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IEZpbGVFeHBvcnRlciB9IGZyb20gJy4vZmlsZS1leHBvcnRlcic7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUeHRFeHBvcnRlclNlcnZpY2UgZXh0ZW5kcyBGaWxlRXhwb3J0ZXI8VHh0T3B0aW9ucz4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY3JlYXRlQ29udGVudChyb3dzOiBhbnlbXSwgb3B0aW9ucz86IFR4dE9wdGlvbnMpIHtcclxuICAgIGxldCBjb250ZW50ID0gJyc7XHJcbiAgICByb3dzLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgIGNvbnRlbnQgKz0gT2JqZWN0LnZhbHVlcyhlbGVtZW50KS5qb2luKHRoaXMuZ2V0RGVsaW1pdGVyKG9wdGlvbnMpKSArIFJFVFVSTjtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGNvbnRlbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TWltZVR5cGUoKTogTWltZSB7XHJcbiAgICByZXR1cm4gTUlNRV9UWFQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldERlbGltaXRlcihvcHRpb25zPzogVHh0T3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIpIHtcclxuICAgICAgcmV0dXJuIG9wdGlvbnMuZGVsaW1pdGVyO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIFRBQjtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==